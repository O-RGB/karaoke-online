// lib/decodeImageFromUrl.ts
import { FileImageCodec } from "../lib/file-image-encoder";

export async function decodeImageFromUrl(imageUrl: string): Promise<File> {
  console.log("[decodeImageFromUrl] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL:", imageUrl);

  return new Promise<File>((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.referrerPolicy = "no-referrer";

    img.onload = async () => {
      console.log("[decodeImageFromUrl] ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      console.log("[decodeImageFromUrl] ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û:", {
        width: img.naturalWidth,
        height: img.naturalHeight,
      });

      try {
        const canvas = document.createElement("canvas");
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
        console.log("[decodeImageFromUrl] üß© ‡∏™‡∏£‡πâ‡∏≤‡∏á canvas ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", {
          width: canvas.width,
          height: canvas.height,
        });

        const ctx = canvas.getContext("2d");
        if (!ctx) {
          console.error("[decodeImageFromUrl] ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡πÑ‡∏î‡πâ");
          throw new Error("Cannot get canvas context");
        }

        ctx.drawImage(img, 0, 0);
        console.log("[decodeImageFromUrl] üñºÔ∏è ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏•‡∏á canvas ‡πÅ‡∏•‡πâ‡∏ß");

        console.log(
          "[decodeImageFromUrl] üîç ‡πÄ‡∏£‡∏¥‡πà‡∏° decode ‡∏î‡πâ‡∏ß‡∏¢ FileImageCodec..."
        );
        const result = await FileImageCodec.decodeImageToFile(canvas);
        console.log("[decodeImageFromUrl] ‚úÖ Decode ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:", result);

        const file = new File([result.blob], result.filename, {
          type: result.blob.type,
        });
        console.log("[decodeImageFromUrl] üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", {
          name: file.name,
          type: file.type,
          size: file.size,
        });

        resolve(file);
      } catch (err: any) {
        console.error(
          "[decodeImageFromUrl] ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á decode:",
          err
        );

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö CORS
        if (
          err instanceof DOMException &&
          /(taint|cross-origin)/i.test(err.message)
        ) {
          reject(new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏¥‡∏î CORS (Cross-Origin)."));
        } else {
          reject(err);
        }
      }
    };

    img.onerror = (err) => {
      console.error("[decodeImageFromUrl] ‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err, imageUrl);
      reject(
        new Error("‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS ‡∏´‡∏£‡∏∑‡∏≠ URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
      );
    };

    console.log("[decodeImageFromUrl] üîó ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ src:", imageUrl.trim());
    img.src = imageUrl.trim();
  });
}
